name: "demoproject-pipeline"

on:
  push:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 19
        uses: actions/setup-java@v1
        with:
          java-version: 19
      - name: Update maven version with the run number
        run: mvn versions:set -DnewVersion=\${{ github.run_number }}


      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4.0.1
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_USER: ${{ secrets.JF_USER }}
          JF_PASSWORD: ${{ secrets.JF_PASS }}
          SERVER_ID: setup-jfrog-cli-server
          #  with:
          #    download-repository: jfrog-cli-remote

      - name: Configure Repos
        run: jf mvnc --server-id-resolve=setup-jfrog-cli-server --server-id-deploy=setup-jfrog-cli-server --repo-resolve-releases=${{ vars.MVN_VIRTUAL_RELEASE_REPO }} --repo-deploy-releases=${{ vars.MVN_VIRTUAL_RELEASE_REPO }} --repo-resolve-snapshots=${{ vars.MVN_VIRTUAL_SNAPSHOTS_REPO }} --repo-deploy-snapshots=${{ vars.MVN_VIRTUAL_SNAPSHOTS_REPO }}

      - name: Test JFrog CLI
        run: |
          jf c show
          jf rt ping
          jf -v
      - name: Frogbot by JFrog
        uses: jfrog/frogbot@9304d3b1d8e05a1b5fc0ba9ebf9ffbd495386250
        env:
          # [Mandatory]
          # JFrog platform URL (This functionality requires version 3.29.0 or above of Xray)
          JF_URL: ${{ secrets.JF_URL }}

          # [Mandatory if JF_ACCESS_TOKEN is not provided]
          # JFrog username with 'read' permissions for Xray. Must be provided with JF_PASSWORD
          JF_USER: ${{ secrets.JF_USER }}

          # [Mandatory if JF_ACCESS_TOKEN is not provided]
          # JFrog password. Must be provided with JF_USER
          JF_PASSWORD: ${{ secrets.JF_PASS }}

          # [Mandatory]
          # The GitHub token automatically generated for the job
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # [Mandatory if JF_USER and JF_PASSWORD are not provided]
          # JFrog access token with 'read' permissions on Xray service
          # JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

          # [Mandatory when using npm]
          # The command that installs the dependencies
          # JF_INSTALL_DEPS_CMD: "npm i"

          # [Optional, default: "FALSE"]
          # Displays all existing vulnerabilities, including the ones that were added by the pull request.
          JF_INCLUDE_ALL_VULNERABILITIES: "TRUE"

          # [Mandatory when using .NET]
          # The command that installs the dependencies
          # JF_INSTALL_DEPS_CMD: "dotnet restore"

          # The full template list with full optional environment variables can be found at https://github.com/jfrog/frogbot/tree/master/templates/github-actions/scan-pull-request
         
      - name: Install Maven Project
        run: jf mvn install -DskipTests -T 4 --project=masterdemo
      - name: Build project
        run: |
          echo "Build Number: ${{ github.run_number }}"
          echo "Build Start Time: ${{ github.run_started_at }}"
        # Your build commands here

      - name: Build Docker Image
          #   env:
          #    DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
          #     DOCKER_IMAGE_TAG: $(echo $DOCKER_REG_SRV/$DOCKER_REG_NAME/$DOCKER_IMAGE_NAME)
          #     DOCKER_REG_NAME: ${{ vars.DOCKER_REG_NAME }}
          #     DOCKER_REG_SRV: ${{ vars.DOCKER_REG_SRV }}

        run: docker build -t masterdemo-dockerbuild .

        #echo " this is the tag ${{ vars.DOCKER_IMAGE_TAG }} "
        #echo " this is also the tag $(echo $DOCKER_REG_SRV/$DOCKER_REG_NAME/$DOCKER_IMAGE_NAME) "
        #docker build -t $DOCKER_IMAGE_NAME .
        #docker tag $DOCKER_IMAGE_NAME $JOB_DOCKER_IMAGE_TAG

      - name: Login to Docker Enviroment
        run: docker login ${{ secrets.JF_DOCKER_REGISTRY }} -u ${{ secrets.JF_USER }} -p ${{ secrets.JF_PASS }}

      - name: Tag Docker Image
        run: docker tag masterdemo-dockerbuild:latest soleng.jfrog.io/masterdemo-docker-dev-local/masterdemo-dockerbuild:${{ github.run_number }}
      - name: Push Docker Image to RT
        #run: docker push $DOCKER_IMAGE_TAG
        run: jf docker push soleng.jfrog.io/masterdemo-docker-dev-local/masterdemo-dockerbuild:${{ github.run_number }} --project=masterdemo
      - name: Collect and Publish Build Info
        run: |
            # Collect environment variables for the build
            jf rt bce
            # Collect VCS details from git and add them to the build
            jf rt bag
            # Publish build info
            jf rt bp --project=masterdemo 
      - name: Create Release Bundle
        run: |
          curl --location 'https://soleng.jfrog.io/lifecycle/api/v2/release_bundle?project=masterdemo&async=false' \
               --header 'X-JFrog-Signing-Key-Name: debian-erika' \
               --header 'Content-Type: application/json' \
               --header 'Authorization: Bearer ${{ secrets.JF_ACCESS_TOKEN }}' \
               --data '{
                        "release_bundle_name": "masterdemo",
                        "release_bundle_version": ${{ github.run_number }},
                        "source_type": "builds",
                        "source": {
                              "builds": [
                                {
                                  "build_repository": "masterdemo-build-info",
                                  "build_name": "demoproject-pipeline",
                                  "build_number": ${{ github.run_number }},
                                  "include_dependencies": false
                                }
                              ]
                                  }
                        }'
      - name: Promote newly created Release Bundle to DEV
        run: |
          curl --location 'https://soleng.jfrog.io/lifecycle/api/v2/promotion/records/masterdemo/${{ github.run_number }}?project=masterdemo&async=false' \
               --header 'X-JFrog-Signing-Key-Name: debian-erika' \
               --header 'Content-Type: application/json' \
               --header 'Authorization: Bearer ${{ secrets.JF_ACCESS_TOKEN }}' \
               --data '{
                          "environment": "DEV",
                          "included_repository_keys": [],
                          "excluded_repository_keys": []
                        }'  
      - name: Promote Release Bundle from DEV to TEST
        run: |
          curl --location 'https://soleng.jfrog.io/lifecycle/api/v2/promotion/records/masterdemo/${{ github.run_number }}?project=masterdemo&async=false' \
               --header 'X-JFrog-Signing-Key-Name: debian-erika' \
               --header 'Content-Type: application/json' \
               --header 'Authorization: Bearer ${{ secrets.JF_ACCESS_TOKEN }}' \
               --data '{
                          "environment": "TEST",
                          "included_repository_keys": [],
                          "excluded_repository_keys": []
                        }' 
      - name: Promote Release Bundle from TEST to QA
        run: |
          curl --location 'https://soleng.jfrog.io/lifecycle/api/v2/promotion/records/masterdemo/${{ github.run_number }}?project=masterdemo&async=false' \
               --header 'X-JFrog-Signing-Key-Name: debian-erika' \
               --header 'Content-Type: application/json' \
               --header 'Authorization: Bearer ${{ secrets.JF_ACCESS_TOKEN }}' \
               --data '{
                          "environment": "QA",
                          "included_repository_keys": [],
                          "excluded_repository_keys": []
                        }' 
      - name: Promote Release Bundle from QA to PROD
        run: |
          curl --location 'https://soleng.jfrog.io/lifecycle/api/v2/promotion/records/masterdemo/${{ github.run_number }}?project=masterdemo&async=false' \
               --header 'X-JFrog-Signing-Key-Name: debian-erika' \
               --header 'Content-Type: application/json' \
               --header 'Authorization: Bearer ${{ secrets.JF_ACCESS_TOKEN }}' \
               --data '{
                          "environment": "PROD",
                          "included_repository_keys": [],
                          "excluded_repository_keys": []
                        }' 
      - name: Promote Release Bundle from PROD to SolEngEdge Node
        run: |
          curl --location 'https://soleng.jfrog.io/lifecycle/api/v2/distribution/distribute/masterdemo/${{ github.run_number }}?project=masterdemo' \
               --header 'X-JFrog-Signing-Key-Name: debian-erika' \
               --header 'Content-Type: application/json' \
               --header 'Authorization: Bearer ${{ secrets.JF_ACCESS_TOKEN }}' \
               --data '{
                        "auto_create_missing_repositories": "true",
                        "distribution_rules": [
                        {
                          "site_name": "SolEngEdgeSaaS"
                        }
                        ],
                        "modifications": {
                          "mappings": [
                              {
                              "input": "(.*)/(.*)",
                              "output": "$1/mapping/$2"
                              }
                                    ]
                          }
                      }' 

         
      
       
       
